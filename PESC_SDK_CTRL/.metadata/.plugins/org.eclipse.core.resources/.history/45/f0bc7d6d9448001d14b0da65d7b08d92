#ifndef SIMULINK
  #include "../include/ConfigParameters.hpp"
  extern ConfigParameters Parameters;
#endif

#include "SwLoadEmulator.hpp"


void LoadEmulator::Initialize(void){

	m_LoadType 	= static_cast<LoadType>(Parameters.Load1.LoadType);
	m_T_load_Nm = 0.0;

	m_PumpData.k_L			= Parameters.Load1.Pump.k_L;
	m_PumpData.t_constant	= Parameters.Load1.Pump.t_constant;

	m_EVData.m       			= Parameters.Load1.EV.m;
	m_EVData.rho     			= Parameters.Load1.EV.rho;
	m_EVData.G       			= Parameters.Load1.EV.G;
	m_EVData.r 					= Parameters.Load1.EV.r;
	m_EVData.friction 			= Parameters.Load1.EV.friction;
    m_EVData.Cw     			= Parameters.Load1.EV.Cw;
    m_EVData.A_car      		= Parameters.Load1.EV.A_car;
    m_EVData.i_gear  			= Parameters.Load1.EV.i_gear;
    m_EVData.gear_efficiency 		= Parameters.Load1.EV.gear_efficiency;
    m_EVData.velocity_lim_0 		= Parameters.Load1.EV.velocity_lim_0;
    m_EVData.velocity_lim_1 		= Parameters.Load1.EV.velocity_lim_1;

    m_ElevatorData.m_elevator 		= Parameters.Load1.Elevator.mass_elevator;
    m_ElevatorData.m_load 			= Parameters.Load1.Elevator.mass_load;
    m_ElevatorData.i_gear 			= Parameters.Load1.Elevator.i_gear;
    m_ElevatorData.gear_efficiency 	= Parameters.Load1.Elevator.gear_efficiency;
}

fp32_t& LoadEmulator::Run(const fp32_t& Actual_Speed_rpm){
	switch(m_LoadType){
		case LoadType::Pump:
			m_T_load_Nm = RunPump(Actual_Speed_rpm);
			break;
		case LoadType::ElectricVehicle:
			m_T_load_Nm = 0.1;
			break;
		case LoadType::ShipPropulsion:
			m_T_load_Nm = 0.2;
			break;
		case LoadType::WindPower:
			m_T_load_Nm = 0.3;
			break;
		case LoadType::HydroPower:
			m_T_load_Nm = 0.4;
			break;
		case LoadType::Elevator:
			m_T_load_Nm = 0.5;
			break;
		default:
			m_T_load_Nm = 0.0;
			break;
	}
	return m_T_load_Nm;
}

const fp32_t LoadEmulator::RunPump(const fp32_t ActSpeed_rpm){
	fp32_t t_pump_Nm;
	if(ActSpeed_rpm >= 0.0)
		t_pump_Nm = m_PumpData.k_L*ActSpeed_rpm*ActSpeed_rpm + m_PumpData.t_constant;
	else
		t_pump_Nm = -m_PumpData.k_L*ActSpeed_rpm*ActSpeed_rpm + m_PumpData.t_constant;
	return t_pump_Nm;
}



/**********    IMPLEMENT YOUR LOAD MODEL HERE   *******************/




/******************************************************************/



#ifdef SIMULINK // **** Only required for MATLAB/Simulink ****

const fp32_t LoadEmulator::getParam(int index){
	return param_var[index];
}

void LoadEmulator::setParamFromMask(int index, const fp32_t newParam){
	param_var[index] = newParam;
}

void LoadEmulator::setLoadType(const LoadType arg){
	m_LoadType = arg;
}

LoadType LoadEmulator::getLoadType(void){
	return m_LoadType;
}

void LoadEmulator::setSig0(const fp32_t signal){
	input_sig0 = signal;
}

void LoadEmulator::setSig1(const fp32_t signal){
	input_sig1 = signal;
}

fp32_t LoadEmulator::getSineWaves(void){
	return param_var[0]*input_sig0 + param_var[1]*input_sig1 + param_var[2];
}
#endif // **** EOF required for MATLAB/Simulink ****
